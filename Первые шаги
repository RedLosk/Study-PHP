Пример простого PHP-файла:

<html>
 <head>
  <title>Моя первая веб-страница с кодом PHP</title>
 </head>
 <body>
 <?php
    echo "Hello world";
 ?>
 </body>
</html>


Пример простого вывода:

<?php
   echo "Hello world";


Комментарии:

<?php   
  echo "Приветствую, приятель, на этом отличном курсе по PHP!";
  // это однострочный комментарий
  echo "Надеюсь, тебе нравится обучение на Степике!";
  # еще один однострочный комментарий

<?php   
  echo "Приветствую, приятель!";
  /*
  Это 
  Многострочный комментарий,
  который содержит
  несколько строк 
  */
  echo "Сейчас я изучаю комментарии в PHP";


Переменные:

<?php
$site = "Stepik";
$foundation = "2341";
echo $site;
#Выведет Stepik


Константы:

Для создания константы используется функция define():

define(constant_name, value, case-insensitive)
Параметры:
constant_name: имя константы;
value: значение константы;
case-insensitive: определяет, должно ли быть имя константы регистронезависимым.
По умолчанию равно false. Начиная с версии PHP 8.0.0 допустимым значенням является
только false, а использование значения true приведет к появлению предупреждения.

<?php
define("GREETINGS", "Привет");
echo GREETINGS;

// Выведет Привет


Типы данных:

INT - Целое число это число из множества ℤ = {..., -2, -1, 0, 1, 2, ...}, то есть натуральные числа, ноль и отрицательные числа.
FLOAT - Числа с плавающей точкой. Число с плавающей точкой - это число, которое включает в себя десятичную точку и не может
содержать в середине пробелы.
Если целая часть отсутствует, можно опустить ноль:

<?php
$a = .6;
$b = .9;
echo $a + $b;
// Выведет 1.5

STRING - Строка
Строка - это последовательность, например, Приветствую, Степик!. Строка может быть любым текстом в двойных или одинарных кавычках.

<?php
$string1 = "Дарова, брат";
$string2 = 'Дарова, брат';

Вы можете объединить две строки, используя оператор конкатенации - точку (.).
Например:

<?php
$a = "Hello, bro, ";
$b = "whats up?";
echo $a.$b;
// Выведет "Hello, bro, whats up?"


Управляющие символы в строках:

Переход на новую строку \n.

<?php
echo 'Январь\nФевраль\nМарт';
// выведет: 
// Январь\nФевраль\nМарт

<?php
echo "Январь\nФевраль\nМарт";
/* выведет:
Январь
Февраль
Март
*/


Логический тип (Boolean)
Логический тип может иметь одно из двух значений: true (правда) или false (ложь):

<?php
  $a = true; 
  $b = false;

Примеры задач:

<?php
    $some_string = 13;
    $some_int = "2000";
    echo $some_string + $some_int;
// 2013

<?php
    $some_string = 13;
    $some_int = "2000";
    echo $some_string.$some_int;
// 132000


Область видимости переменных:

Переменные PHP могут быть объявлены в любом месте программы. А область видимости переменной - 
это та часть программы, в которой переменную можно использовать.
В PHP есть глобальная и локальная области видимости переменных.
Переменная, которая была объявлена вне функции, имеет глобальную область видимости (но по умолчанию не видна внутри функции).
Переменная, которая была объявлена внутри функции, имеет локальную область видимости. Доступ к ней возможен только внутри этой функции.

<?php
 $city = "London";
  function get_city() {
   echo $city;
 }
 get_city();
// Error: Undefined variable: city
// Ошибка: Неопределенная переменная: city


Ключевое слово global:

Ключевое слово global используется для того, чтобы получить доступ к глобальной переменной изнутри функции:

<?php
 $city = "London";
 function get_city() {
 global $city;
 echo $city;
}
get_city();

<?php
$int1 = 81;
function number() {
  $int1 = 18;
  echo $int1;
}
number();
// 18


4. Операторы
4.1 Арифметические операторы

Операторы выполняют операции с переменными и значениями.
Оператором называется что-то, что принимает одно или более значений (переменных или выражений) и вычисляет новое значение.

Примеры:

<?php
  $int1 = 10;
  $int2 = 3;

  // Сложение
  echo $int1 + $int2; // 13

  // Вычитание
  echo $int1 - $int2; // 7

  // Умножение
  echo $int1 * $int2; // 30

  // Деление
  echo $int1 / $int2; // 3.33333333333

  // Получение остатка от деления
  echo $int1 % $int2; // 1/
сли вы используете числа с плавающей точкой с данным оператором, то перед операцией они будут преобразованы в целые числа, путем отбрасывания дробной части.

  // Возведение в степень
  echo $int1 ** $int2; // 1000

Инкремент и декремент  
Операторы инкремента используются для увеличения значения переменной на единицу.
Операторы декремента используются для уменьшения значения переменной на единицу.

$x++; // то же самое, если бы мы сделали так: $x = $x+1;
$x--; // то же самое, если бы мы сделали так: $x = $x-1; 
Операторы инкремента и декремента либо предшествуют переменной, либо следуют за ней:

$x++; // постфиксный инкремент
$x--; // постфиксный декремент
++$x; // префиксный инкремент
--$x; // префиксный декремент
Разница заключается в том, что постфиксный инкремент возвращает исходное значение до изменения переменной, в то время как префиксный инкремент сначала изменяет переменную, а затем возвращает значение:

$x = 5; $y = $x++; // $x = 6,  $y = 5
$x = 5; $y = ++$x; // $x = 6,  $y = 6
Декремент работает аналогично. 

4.2 Операторы присваивания

Операторы присваивания используются для записи значений в переменные:

$int1 = 13;
$int2 = $int1;
Переменные $int1 и $int2 теперь содержат значение 13. 

Присвоения могут также использоваться совместно с арифметическими операторами:

Пример	Эквивалент	Операция
$a += $b	$a = $a + $b	Сложение
$a -= $b	$a = $a - $b	Вычитание
$a *= $b	$a = $a * $b	Умножение
$a /= $b	$a = $a / $b	Деление
$a %= $b	$a = $a % $b	Остаток от целочисленного деления
$x **= $y	$x = $x ** $y	Возведение в степень
Пример:

<?php
 $x = 3;
 $x **= 2;
 echo $x; // выведет: 9

4.3 Операторы сравнения

Операторы сравнения сравнивают два значения (числа или строки).
Операторы сравнения используются внутри условных операторов и в результате выдают значения true или false.

Оператор	Название	Пример	Результат
==	Равно	$x == $y	возвращает true если $x равно $y
!=	Не равно	$x != $y	возвращает true если $x не равно $y
<>	Не равно	$x <> $y	возвращает true если $x не равно $y
>	Больше чем	$x > $y	возвращает true если $x больше чем $y
<	Меньше чем	$x < $y	возвращает true если $x меньше чем $y
>=	Больше или равно	$x >= $y	возвращает true если $x больше или равно $y
<=	Меньше или равно	$x <= $y	возвращает true если $x меньше или равно $y
 
Существуют и другие операторы сравнения:

Оператор	Название	Пример	Результат
===	Тождественно равно	$x === $y	возвращает true если $x равно $y и они одного типа
!==	Тождественно не равно	$x !== $y	возвращает true если $x не равно $y или они не одного типа

Будьте внимательны при их использовании, потому что их особенность заключается в том, что при сравнении === или !== сравниваются не только значения, но и типы переменных:


4.4 Логические операторы

Для объединения условных операторов используются логические операторы:

Оператор  	Название  	Пример  	Результат  
!	        отрицание	   !$x	    TRUE, если $x не TRUE.
&&	           и	      $x && $y	TRUE, если и $x, и $y TRUE.
||	          или	     $x || $y	TRUE, если или $x, или $y TRUE.
and	          и	      $x and $y	TRUE, если и $x, и $y TRUE.
xor	  исключающее или	$x xor $y	TRUE, если $x, или $y TRUE, но не оба.
or	          или	     $x or $y	TRUE, если или $x, или $y TRUE.
 

5. Массивы
5.1 Индексированные массивы

Массив (array) - это специальная переменная, которая может содержать более одного значения одновременно.
В индексированном массиве числовой индекс связывается с определенным значением.
Индекс может быть присвоен автоматически (индекс всегда начинается с 0), например так:

$cities = array("London", "Oslo", "Moscow", "Krasnodar");
// Лондон имеет индекс 0
// Осло имеет индекс 1
// Вена имеет индекс 2
// Дели имеет индекс 3

В качестве альтернативы вы можете назначить индекс вручную:
$cities[0] = "London";
$cities[1] = "Осло";
$cities[2] = "Вена";
$cities[3] = "Дели";

В обоих случаях мы создали массив под названием $cities, в котором хранятся четыре значения.
Доступ к элементам массива можно получить через их индексы:

echo $cities[3]; // выведет: Дели

Но есть и упрощенный вариант создания массива, используя просто квадратные скобки:
$arr = [];
Таким образом мы создадим пустой массив. Но можно сразу при создании добавить в него какие-то элементы:

$cities = ["Лондон", "Осло", "Вена", "Дели"];

<?php
$diff = array("Stepik", "create", 2013);
echo "$diff[0] was $diff[1] in $diff[2]";

5.2 Ассоциативные массивы

Ассоциативные массивы - это массивы, использующие именованные ключи, которые вы им назначаете.
Есть два способа создания ассоциативного массива:

$langs = array("Python" => 1991, "PHP" => 1995, "Go" => 2009);
или

$langs["Python"] = 1991;
$langs["PHP"] = 1995;
$langs["Go"] = 2009;

Используйте именованные ключи для доступа к элементам массива:

$langs = array("Python" => 1991, "PHP" => 1995, "Go" => 2009);
echo $langs["PHP"]; // выведет: 1995

5.3 Многомерные массивы

Многомерный массив содержит один или несколько массивов.
Размерность массива указывает на количество индексов, по которым необходимо выбрать элемент:
- для двумерного массива необходимо два индекса для выбора элемента.
- для трехмерного массива необходимо три индекса для выбора элемента.

Давайте создадим двумерный массив, содержащий 3 массива второго уровня:

$countries = array(
   "Азия" => array("Китай", "Катар", "Индия"),
   "Америка" => array("США", "Канада", "Чили"),
   "Европа" => array("Франция", "Англия", "Италия")
);
Теперь двумерный массив $countries содержит 3 массива и имеет два индекса: строку и столбец. 
Для доступа к элементам массива $countries нужно указать эти два индекса:

echo $countries["Азия"][0];   // выведет: Китай
echo $countries["Европа"][1]; // выведет: Англия
Массивы в многомерном массиве могут быть и ассоциативными:

$countries = array(
   "Китай" => array("континент" => "Азия", "население" => 1313),
   "США" => array("континент" => "Америка", "население" => 298),
   "Франция" => array("континент" => "Европа", "население" => 62)
);
Для доступа к тому или иному элементу такого массива тоже нужно использовать два индекса:

echo $countries["Китай"]["население"];   // выведет: 1313
echo $countries["Франция"]["континент"]; // выведет: Европа

6. Управляющие структуры
6.1 Оператор If/else

Условные конструкции
Благодаря условным конструкциям можно управлять порядком выполнения кода. Для этого используется оператор if:

if (условие) {
  код будет выполнен если условие равно true;
}
Если условие равно true, будет выполнен код в фигурных скобках, а если условие будет равно false, этот фрагмент кода выполнен не будет:

password = 7055;
if ($password == 7055) { 
  echo "Пароль верный";
}
// пароль верный, условие равно true
// код будет выполнен и выведет: Пароль верный

$password = 7055;
if ($password == 3142) { 
  echo "Пароль неверный";
}
// пароль неверный, условие равно false
// код не будет выполнен и ничего не будет выведено

Для большей гибкости можно использовать оператор if else. if-ветка будет выполнена, если условие равно true, а else-ветка - если условие равно false:

if (условие) {
   код будет выполнен, если условие равно true;
} else {
   код будет выполнен, если условие равно false;
}

<?php
$a = readline();
$b = readline();
if ($a > $b) {
   echo "a more than b";
} else {
   echo "Amogus";
}

6.2 Оператор elseif

<?php
$a = readline();
$b = readline();
if ($a > $b) {
    echo "a больше чем b";
} elseif ($a == $b) {
    echo "a равно b";
} else {
    echo "a меньше чем b";
}

В условиях мы можем использовать логические операторы для того, чтобы создавать составные условия, например:

$height = 177;
if ($height <= 165) {
   echo "Человек невыского роста";
} elseif ($height > 165 && $height <= 185) {
   echo "Человек среднего роста";
} else {
   echo "Высокий человек";
}
// выведет: Человек среднего роста

f ($x > 1 && $x <= 100 && $x % 2 == 0)

<?php
$a = readline();
if ($a == "Испания") {
    echo "Мадрид"; 
} elseif ($a == "Великобритания") {
    echo "Лондон";
} elseif ($a == "Китай") {
    echo "Пекин";
} else {
    echo "Это неправильная страна";
}
?>


6.3 Циклы while

Для того чтобы выполнить несколько раз подряд один и тот же код используются циклы.

Цикл While
В цикле while блок кода выполняется до тех пор, пока указанное условие истинно (true). Данный вид цикла удобно использовать, когда вы не знаете сколько именно раз нужно выполнить цикл, но знаете
условие, при котором его работу нужно прекратить.

Общий вид цикла:

while (условие равно true) {
   код будет выполняться;
}
Обратите внимание на то, что в случае, когда условие никогда не станет равно false, цикл будет выполняться бесконечно и программа "зависнет".

Представим себе, что нам нужно вывести пять раз подряд приветствие. Это можно сделать так:

echo "Приветствую!";
echo "Приветствую!";
echo "Приветствую!";
echo "Приветствую!";
echo "Приветствую!";

А можно использовать цикл. Для этого нам сначала нужно объявить переменную $x, которая будет равна нулю ($x = 0). Потом цикл while будет
выполняться до тех пор, пока переменная $x будет меньше пяти ($x < 5). $x увеличивается на единицу каждый раз при выполнении цикла благодаря инкременту ($x++):

$x = 0;
while ($x < 5) {
  echo "Приветствую!\n";
  $x++;
}
В результате работы цикла мы увидим:

Приветствую!
Приветствую!
Приветствую!
Приветствую!
Приветствую!

Обратите внимание на инкремент в теле цикла. Если мы не будем изменять значение переменной $x в теле цикла, то его
условие всегда будет равно true и он будет выполняться бесконечно, что приведет к зависания программы.

<?php
$x = readline();
while($x <= 10)   {
    echo $x;
    $x++;
}
// 345678910


6.4 Цикл do while

Цикл do...while всегда сначала выполняет один раз блок кода, который содержится в теле цикла, потом проверяет условие и повторяет цикл до тех пор, пока указанное условие будет истинно (равно true).

Общий вид цикла:

do {
  выполняется код;
} while (условие равно true); 
Важной особенностью этого цикла является то, что независимо от того, является условие ложным (false) или истинным (true), код в теле цикла всегда будет выполнен как минимум один раз:

$i = 0;
do {
    echo $i;
} while ($i > 0);
// хотя условие с самого начала равно false,
// цикл все равно выполнится один раз и выведет 0

$x = 10;
do {
   echo "Шаг ".$x."\n";
   $x--;
} while($x >= 8);

/* вывод:
Шаг 10
Шаг 9
Шаг 8
*/

6.5 Цикл for

Цикл for используется, когда вы заранее знаете, сколько раз должен быть выполнен цикл.

Общий вид цикла:

for (expr1; expr2; expr3) {
   выполняемый код (тело цикла);
}

expr1: счетчик, это выражение высчитывается один раз в начале работы цикла. Этим задается начальное значение счетчика цикла;
expr2: условие цикла, оценивается каждый раз в начале итерации цикла. Цикл будет выполняться, пока указанное условие будет равно true, и завершит свою работу, когда оно станет равно false;
expr3: изменение счетчика. Этот параметр выполняется в конце каждой итерации цикла и позволяет изменять значение счетчика.

Например, нам нужно вывести числа с 1 до 3. Мы устанавливаем значение счетчика ($x = 1), потому что хотим начинать вывод с числа один. В условие ставим - меньше 4 ($x < 4), то есть когда
счетчик станет равным 4, то цикл прекратит свою работу. В третьем параметре мы будем с использованием инкремента увеличиваться счетчик на один в каждой итерации цикла ($x++):

for ($x = 1; $x < 4; $x++) {
  echo $x."\n";
}

/* выведет:
1
2
3
*/
 
Каждый параметр может быть пустым или содержать несколько выражений, разделенных запятыми. 
В операторе for параметры разделяются точкой с запятой.

При создании цикла не обязательно должны быть все три параметра. Мы можем переписать пример из первого шага данного урока про вывод трех чисел следующим образом:

$x = 1;
for ( ; $x < 4; ) {
  echo $x."\n";
  $x++;
}

/* выведет:
1
2
3
*/
Счетчик вы вынесли за пределы цикла, а его изменение переместили в тело цикла, но результат получился точно таким же.

Несмотря на такие возможности, чаще всего стоит использовать все три параметра цикла в их классическом виде:

​for (expr1; expr2; expr3) {
   код, который выполняется (тело цикла);
}​

<?php
$city = readline();
for($i=0; $i < 7; $i++) {
  echo $city; 
}

<?php
$name = readline();
$int = readline();
for ($i = 0; $i < $int; $i++) {
  echo $name."\n";
}
?>


6.6 Цикл foreach

Оператор foreach дает возможность перебирать элементы массивов. Он работает только с массивами и будет выдавать ошибку при попытке использовать его с другими типами данных.

Существует два варианта синтаксиса:

foreach (array as $value) {
    код для выполнения;
}
//или
foreach (array as $key => $value) {
    код для выполнения;
}
Первый вариант перебирает массив array. На каждой итерации значение текущего элемента присваивается переменной $value.

При использовании второго варианта дополнительно присваивается ключ текущего элемента переменной $key на каждой итерации.

Следующий пример демонстрирует цикл, в котором выводятся значения массива $cities:

$cities = array("Лондон", "Париж", "Мадрид");
foreach ($cities as $city) {
    echo $city."\n";
}

/* выведет:
Лондон
Париж
Мадрид
*/

<?php
$continents = array("Азия", "Америка", "Африка", "Европа");
foreach ($continents as $continent) {
  echo $continent."\n";
}

6.7 Оператор break

Иногда бывает так, что нам нужно остановить работу цикла в какой-то момент, еще до того, как его условие будет равно false. Для этого существует оператор break.
Его можно использовать для прерывания исполнения циклов for, foreach, while, do-while.

Например:

<?php
$arr = array(2, 4, 6, 7, 8, 10, 12);
foreach ($arr as $val) {
    if ($val % 2 != 0) {
        break;
    } echo $val."\n";
}

/* выведет:
2
4
6
*/

<?php
$x = 0;
while ($x < 10) {
    if ($x == 3) {
        break;
    } echo "Приветствую\n";
    $x++;
}

6.8 Оператор continue

Оператор continue позволяет при использовании внутри цикла пропускать ту часть кода, которая осталась в текущей итерации цикла.
После чего, если условие все еще равно true, выполняется следующая итерация цикла.

Например:

<?php
$arr = array(6, 7, 8, 9, 10, 11, 12);
foreach ($arr as $val) {
    if ($val % 2 != 0) {
        continue;   
    } echo $val."\n";
}

/* выведет:
6
8
10
12
*/
В приведенном выше примере будут выведены только четные числа из массива, а нечетные будут пропущены благодаря использованию оператора continue.

Оператор continue работает в циклах for, foreach, while, do-while.

<?php
$arr = array("one", "two", "three", "four", "five");
foreach ($arr as $num) {
  if ($num == "two" || $num == "four") {
     continue;
  } echo $num."\n";
}

<?php
for ($x = 1; $x <= 10; $x++) {
  if ($x % 2 != 0) {
    continue;
  }
  echo $x."\n";
}


6.9 Оператор switch

Оператор switch является альтернативой оператору if-elseif-else. 

Ниже приведены примеры кода с использованием if-elseif и оператора switch. В обоих случаях результат будет идентичным:

// if-elseif:
if ($i == 0) {
    echo "i равно 0";
} elseif ($i == 1) {
    echo "i равно 1";
} elseif ($i == 2) {
    echo "i равно 2";
}

// оператор switch:
switch ($i) {
    case 0:
        echo "i равно 0";
        break;
    case 1:
        echo "i равно 1";
        break;
    case 2:
        echo "i равно 2";
        break;
}
В примере выше берется переменная $i и сравнивается со значением каждого случая (case). В случае совпадения выполняется блок кода, связанный с этим случаем.

Общий вид оператора switch:

​switch ($i) {
  case value1:
    //код будет выполнен, если $i = value1
    break;
  case value2:
    //код будет выполнен, если $i = value2
    break;
  ...
  default:
    // код будет выполнен, если $i отличается от всех перечисленных значений
}
После каждого случая (case) обычно идет ключевое слово break, которое используется для того, чтобы прервать выполненение оператора switch.  Если вы забудете поставить break,
PHP автоматически продолжит выполнение следующего случая, даже если случай не совпадает со значением переменной $i:

$i = 0;
switch ($i) {
    case 0:
        echo "i равно 0"."\n";
    case 1:
        echo "i равно 1"."\n";
    case 2:
        echo "i равно 2"."\n";
}

/*выведет
i равно 0
i равно 1
i равно 2
*/
Как вы можете видеть, если не поставить break после каждого случая, то код будет выполняться с момента совпадения переменной $i со значением case и до самого конца оператора switch.

<?php
$i = readline();
switch($i) {
  case 1:
    echo "Зима";  
    break;
  case 2:
    echo "Весна";
    break;
  case 3:
    echo "Лето";
    break;
  case 4:
    echo "Осень";
    break;
}

default
default используется в том случае, если ни один из случаев (case) не совпал со значением переменной:

$x = 8;
switch ($x) {
  case 1:
    echo "Декабрь, январь, февраль";
    break;
  case 2:
    echo "Март, апрель, май";
    break;
  case 3:
    echo "Июнь, июль, август";
    break;
  case 4:
    echo "Сентябрь, октябрь, ноябрь";
    break;
  default:
    echo "Существует только 4 сезона";
}

// выведет: Существует только 4 сезона
Без default оператор switch похож на if-elseif, а с использованием default - на if-elseif-else. Точно также как и в условном операторе не обязательно использовать else,
в операторе switch не обязательно использовать default. Если он вам нужен - ставьте, если нет - не ставьте.

Секция case может быть пустой. Это передает управление следующему случаю (case), что позволяет использовать выполнение одного кода для нескольких случаев:

switch($car)
{
    case "Ferrari":
    case "Maybach":
    case "Rolls-Royce":
    case "Bugatti":
        echo "Это хороший и дорогой автомобиль";
        break;
    default:
        echo "Какая-то дешевка";
}
Если переменная $car будет равна значению одного из первых четырех случаев, будет выведен текст Это хороший и дорогой автомобиль. Это позволяет действовать более гибко при
написании оператора switch, если требуется выполнять одно и тоже действие для нескольких случаев.
<?php
$month = readline();
switch($month) {
    case "Январь":
    case "Февраль":
    case "Декабрь";
        echo "Зима";
        break;
    case "Март":
    case "Апрель":
    case "Май";
        echo "Весна";
        break;
    case "Июнь":
    case "Июль":
    case "Август";
        echo "Лето";
        break;
    case "Сентябрь":
    case "Октябрь":
    case "Ноябрь";
        echo "Осень";
        break;
    default:
        echo "Такого месяца нет";
}
?>

<?php
$a = readline();
$b = readline();
for ( ; $b >= $a; $a++) {
    if ($a % 2 == 0) 
    print_r($a." ");
}

<?php
while(true) {
    $current = readline();

    if ($current != 10) {
        print_r($current."\n");
    } else {
        break;
    }
}

<?php

$number = (int) readline();

while ($number !== 10) {
    if ($number !== 5 && $number !== 15) {
        echo $number . "\n";
    }

    $number = (int) readline();
}

7 Функции
7.1 Функции, определяемые пользователем

Функция - это блок операторов, который может быть многократно использован в программе.

В PHP есть встроенные функции, например readline(), с которой мы уже знакомились. Также вы можете писать собственные функции.

Общий вид функции:

function hello_stepik() 
{
    echo "Приветствую, Степик!"; // тело функции
}
Объявление функции начинается с ключевого слова function. Затем необходимо указать имя функции, в примере выше это hello_stepik, сразу за которым ставятся круглые скобки ().
Далее идут фигурные скобки, между которым находится так называемое тело функции - тот код, который будет выполняться при вызове функции.

Функция не выполняется сразу при запуске программы. Она будет выполнена только после вызова функции. Вызывается функция путем написания ее имени с круглыми скобками:

hello_stepik();

Требования к наименованию функций аналогичны требованиям к переменным. Имя функции может начинаться с буквы или знака подчёркивания, за которым следует любое количество букв, цифр или знаков подчёркивания.

Также рекомендуется называть функции маленькими буквами. Если в названии содержиться несколько слов - разделяйте их нижними подчеркиваниями. Рекомендуется называть так:

hello_stepik
good_day
my_function
summ

Будьте внимательны, имена функций НЕ чувствительны к регистру.
hello_stepik и HELLO_STEPIK - это одна и та же функция.

В теле функции могут быть несколько инструкций:

<?php
function hello_stepik2() 
{
  echo "Приветствую, Степик!\n";
  echo "Как твои дела?\n";
  echo "Опять отдыхаешь?\n";
}

hello_stepik2();
/* выведет:
Приветствую, Степик!
Как твои дела?
Опять отдыхаешь?
*/

function my_print2()
{
    echo ($a = readline());
}

function hello_stepik() 
{
    echo "Привет, Мир!";
}

7.2 Аргументы функций

