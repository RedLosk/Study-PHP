Пример простого PHP-файла:

<html>
 <head>
  <title>Моя первая веб-страница с кодом PHP</title>
 </head>
 <body>
 <?php
    echo "Hello world";
 ?>
 </body>
</html>


Пример простого вывода:

<?php
   echo "Hello world";


Комментарии:

<?php   
  echo "Приветствую, приятель, на этом отличном курсе по PHP!";
  // это однострочный комментарий
  echo "Надеюсь, тебе нравится обучение на Степике!";
  # еще один однострочный комментарий

<?php   
  echo "Приветствую, приятель!";
  /*
  Это 
  Многострочный комментарий,
  который содержит
  несколько строк 
  */
  echo "Сейчас я изучаю комментарии в PHP";


Переменные:

<?php
$site = "Stepik";
$foundation = "2341";
echo $site;
#Выведет Stepik


Константы:

Для создания константы используется функция define():

define(constant_name, value, case-insensitive)
Параметры:
constant_name: имя константы;
value: значение константы;
case-insensitive: определяет, должно ли быть имя константы регистронезависимым.
По умолчанию равно false. Начиная с версии PHP 8.0.0 допустимым значенням является
только false, а использование значения true приведет к появлению предупреждения.

<?php
define("GREETINGS", "Привет");
echo GREETINGS;

// Выведет Привет


Типы данных:

INT - Целое число это число из множества ℤ = {..., -2, -1, 0, 1, 2, ...}, то есть натуральные числа, ноль и отрицательные числа.
FLOAT - Числа с плавающей точкой. Число с плавающей точкой - это число, которое включает в себя десятичную точку и не может
содержать в середине пробелы.
Если целая часть отсутствует, можно опустить ноль:

<?php
$a = .6;
$b = .9;
echo $a + $b;
// Выведет 1.5

STRING - Строка
Строка - это последовательность, например, Приветствую, Степик!. Строка может быть любым текстом в двойных или одинарных кавычках.

<?php
$string1 = "Дарова, брат";
$string2 = 'Дарова, брат';

Вы можете объединить две строки, используя оператор конкатенации - точку (.).
Например:

<?php
$a = "Hello, bro, ";
$b = "whats up?";
echo $a.$b;
// Выведет "Hello, bro, whats up?"


Управляющие символы в строках:

Переход на новую строку \n.

<?php
echo 'Январь\nФевраль\nМарт';
// выведет: 
// Январь\nФевраль\nМарт

<?php
echo "Январь\nФевраль\nМарт";
/* выведет:
Январь
Февраль
Март
*/


Логический тип (Boolean)
Логический тип может иметь одно из двух значений: true (правда) или false (ложь):

<?php
  $a = true; 
  $b = false;

Примеры задач:

<?php
    $some_string = 13;
    $some_int = "2000";
    echo $some_string + $some_int;
// 2013

<?php
    $some_string = 13;
    $some_int = "2000";
    echo $some_string.$some_int;
// 132000


Область видимости переменных:

Переменные PHP могут быть объявлены в любом месте программы. А область видимости переменной - 
это та часть программы, в которой переменную можно использовать.
В PHP есть глобальная и локальная области видимости переменных.
Переменная, которая была объявлена вне функции, имеет глобальную область видимости (но по умолчанию не видна внутри функции).
Переменная, которая была объявлена внутри функции, имеет локальную область видимости. Доступ к ней возможен только внутри этой функции.

<?php
 $city = "London";
  function get_city() {
   echo $city;
 }
 get_city();
// Error: Undefined variable: city
// Ошибка: Неопределенная переменная: city


Ключевое слово global:

Ключевое слово global используется для того, чтобы получить доступ к глобальной переменной изнутри функции:

<?php
 $city = "London";
 function get_city() {
 global $city;
 echo $city;
}
get_city();

<?php
$int1 = 81;
function number() {
  $int1 = 18;
  echo $int1;
}
number();
// 18


4. Операторы
4.1 Арифметические операторы

Операторы выполняют операции с переменными и значениями.
Оператором называется что-то, что принимает одно или более значений (переменных или выражений) и вычисляет новое значение.

Примеры:

<?php
  $int1 = 10;
  $int2 = 3;

  // Сложение
  echo $int1 + $int2; // 13

  // Вычитание
  echo $int1 - $int2; // 7

  // Умножение
  echo $int1 * $int2; // 30

  // Деление
  echo $int1 / $int2; // 3.33333333333

  // Получение остатка от деления
  echo $int1 % $int2; // 1/
сли вы используете числа с плавающей точкой с данным оператором, то перед операцией они будут преобразованы в целые числа, путем отбрасывания дробной части.

  // Возведение в степень
  echo $int1 ** $int2; // 1000

Инкремент и декремент  
Операторы инкремента используются для увеличения значения переменной на единицу.
Операторы декремента используются для уменьшения значения переменной на единицу.

$x++; // то же самое, если бы мы сделали так: $x = $x+1;
$x--; // то же самое, если бы мы сделали так: $x = $x-1; 
Операторы инкремента и декремента либо предшествуют переменной, либо следуют за ней:

$x++; // постфиксный инкремент
$x--; // постфиксный декремент
++$x; // префиксный инкремент
--$x; // префиксный декремент
Разница заключается в том, что постфиксный инкремент возвращает исходное значение до изменения переменной, в то время как префиксный инкремент сначала изменяет переменную, а затем возвращает значение:

$x = 5; $y = $x++; // $x = 6,  $y = 5
$x = 5; $y = ++$x; // $x = 6,  $y = 6
Декремент работает аналогично. 

4.2 Операторы присваивания

Операторы присваивания используются для записи значений в переменные:

$int1 = 13;
$int2 = $int1;
Переменные $int1 и $int2 теперь содержат значение 13. 

Присвоения могут также использоваться совместно с арифметическими операторами:

Пример	Эквивалент	Операция
$a += $b	$a = $a + $b	Сложение
$a -= $b	$a = $a - $b	Вычитание
$a *= $b	$a = $a * $b	Умножение
$a /= $b	$a = $a / $b	Деление
$a %= $b	$a = $a % $b	Остаток от целочисленного деления
$x **= $y	$x = $x ** $y	Возведение в степень
Пример:

<?php
 $x = 3;
 $x **= 2;
 echo $x; // выведет: 9

4.3 Операторы сравнения

Операторы сравнения сравнивают два значения (числа или строки).
Операторы сравнения используются внутри условных операторов и в результате выдают значения true или false.

Оператор	Название	Пример	Результат
==	Равно	$x == $y	возвращает true если $x равно $y
!=	Не равно	$x != $y	возвращает true если $x не равно $y
<>	Не равно	$x <> $y	возвращает true если $x не равно $y
>	Больше чем	$x > $y	возвращает true если $x больше чем $y
<	Меньше чем	$x < $y	возвращает true если $x меньше чем $y
>=	Больше или равно	$x >= $y	возвращает true если $x больше или равно $y
<=	Меньше или равно	$x <= $y	возвращает true если $x меньше или равно $y
 
Существуют и другие операторы сравнения:

Оператор	Название	Пример	Результат
===	Тождественно равно	$x === $y	возвращает true если $x равно $y и они одного типа
!==	Тождественно не равно	$x !== $y	возвращает true если $x не равно $y или они не одного типа

Будьте внимательны при их использовании, потому что их особенность заключается в том, что при сравнении === или !== сравниваются не только значения, но и типы переменных:


4.4 Логические операторы

Для объединения условных операторов используются логические операторы:

Оператор  	Название  	Пример  	Результат  
!	        отрицание	   !$x	    TRUE, если $x не TRUE.
&&	           и	      $x && $y	TRUE, если и $x, и $y TRUE.
||	          или	     $x || $y	TRUE, если или $x, или $y TRUE.
and	          и	      $x and $y	TRUE, если и $x, и $y TRUE.
xor	  исключающее или	$x xor $y	TRUE, если $x, или $y TRUE, но не оба.
or	          или	     $x or $y	TRUE, если или $x, или $y TRUE.
 

5. Массивы
5.1 Индексированные массивы

Массив (array) - это специальная переменная, которая может содержать более одного значения одновременно.
В индексированном массиве числовой индекс связывается с определенным значением.
Индекс может быть присвоен автоматически (индекс всегда начинается с 0), например так:

$cities = array("London", "Oslo", "Moscow", "Krasnodar");
// Лондон имеет индекс 0
// Осло имеет индекс 1
// Вена имеет индекс 2
// Дели имеет индекс 3

В качестве альтернативы вы можете назначить индекс вручную:
$cities[0] = "London";
$cities[1] = "Осло";
$cities[2] = "Вена";
$cities[3] = "Дели";

В обоих случаях мы создали массив под названием $cities, в котором хранятся четыре значения.
Доступ к элементам массива можно получить через их индексы:

echo $cities[3]; // выведет: Дели

Но есть и упрощенный вариант создания массива, используя просто квадратные скобки:
$arr = [];
Таким образом мы создадим пустой массив. Но можно сразу при создании добавить в него какие-то элементы:

$cities = ["Лондон", "Осло", "Вена", "Дели"];

<?php
$diff = array("Stepik", "create", 2013);
echo "$diff[0] was $diff[1] in $diff[2]";

5.2 Ассоциативные массивы

Ассоциативные массивы - это массивы, использующие именованные ключи, которые вы им назначаете.
Есть два способа создания ассоциативного массива:

$langs = array("Python" => 1991, "PHP" => 1995, "Go" => 2009);
или

$langs["Python"] = 1991;
$langs["PHP"] = 1995;
$langs["Go"] = 2009;

Используйте именованные ключи для доступа к элементам массива:

$langs = array("Python" => 1991, "PHP" => 1995, "Go" => 2009);
echo $langs["PHP"]; // выведет: 1995

5.3 Многомерные массивы

Многомерный массив содержит один или несколько массивов.
Размерность массива указывает на количество индексов, по которым необходимо выбрать элемент:
- для двумерного массива необходимо два индекса для выбора элемента.
- для трехмерного массива необходимо три индекса для выбора элемента.

Давайте создадим двумерный массив, содержащий 3 массива второго уровня:

$countries = array(
   "Азия" => array("Китай", "Катар", "Индия"),
   "Америка" => array("США", "Канада", "Чили"),
   "Европа" => array("Франция", "Англия", "Италия")
);
Теперь двумерный массив $countries содержит 3 массива и имеет два индекса: строку и столбец. 
Для доступа к элементам массива $countries нужно указать эти два индекса:

echo $countries["Азия"][0];   // выведет: Китай
echo $countries["Европа"][1]; // выведет: Англия
Массивы в многомерном массиве могут быть и ассоциативными:

$countries = array(
   "Китай" => array("континент" => "Азия", "население" => 1313),
   "США" => array("континент" => "Америка", "население" => 298),
   "Франция" => array("континент" => "Европа", "население" => 62)
);
Для доступа к тому или иному элементу такого массива тоже нужно использовать два индекса:

echo $countries["Китай"]["население"];   // выведет: 1313
echo $countries["Франция"]["континент"]; // выведет: Европа
